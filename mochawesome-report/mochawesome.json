{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2023-06-05T14:48:36.490Z",
    "end": "2023-06-05T14:48:38.580Z",
    "duration": 2090,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "63747f00-bdc0-4ecb-9aad-08838221009c",
      "title": "",
      "fullFile": "D:\\TelusAutomation\\TelusCypressAutomation\\tests\\test_multiple_users.js",
      "file": "\\tests\\test_multiple_users.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41549c73-7401-4b82-abd7-dde7f408bb87",
          "title": "BSS Sanity Suite",
          "fullFile": "D:\\TelusAutomation\\TelusCypressAutomation\\tests\\test_multiple_users.js",
          "file": "\\tests\\test_multiple_users.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create User - CRM Account List",
              "fullTitle": "BSS Sanity Suite Create User - CRM Account List",
              "timedOut": true,
              "duration": 2083,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    app.set('trust proxy', 1) \n    \n    app.use(cookieSession({\n        name: 'session',\n        keys: ['a5UFK8Z6gQOQTihV1eZLSUNVMeHZrluYLJAAAABm', '64MsW4nco1gYD43rN7vsDvuvACUTn-5kvfcAAABm'],\n      \n        // Cookie Options\n        maxAge: 24 * 60 * 60 * 1000 // 24 hours\n      }))\n      app.use(function (req, next) {\n        req.session.nowInMinutes = Math.floor(Date.now() / 60e3)\n        next()\n      })\n     url = apiConfigJson.preprod.url;\n    uri = apiConfigJson.preprod.USER_LOGIN_URI;\n    environementUrl = url + \"/\" + uri;\n    console.log('URL', environementUrl);\n    updatedRequestBody = dataJson.testData.USER_LOGIN_Copy;\n   const config = {\n        'method': 'POST',\n        'url': environementUrl,\n        'maxBodyLength': Infinity,\n        'headers': {\n            'Content-Type': 'application/json'\n        },\n        'data': JSON.stringify(updatedRequestBody),\n        'httpsAgent': httpsAgentPreProd\n    }\n    headersConfig = await axios(config).then((response) => {\n    statusCode = response.status;\n    console.log('Response Body :===>>> ', response.data);\n   \n   const headers = cleansCode(String(response.headers['set-cookie']))\n  //  console.log(\"COOKIE  HEADERS- \", headers);\n    // const headerConfig = {\n    //     telus_access_cookie : response.headers['set-cookie']['telus_access_cookie'],\n    //     telus_refresh_cookie: response.headers['set-cookie']['telus_refresh_cookie']\n    // }\n    return headers;\n    })  \n    uri = apiConfigJson.preprod.USER_PROFILE_URI;\n    environementUrl = url + \"/\" + uri;\n    // const postmanToken = '_cfuvid=Jg.sizRTqUGab_3DC9sEaL84K3ZTgX_HJaA_l8NyTC8-1685382328448-0-604800000; Path=/; Domain=postman.com; Secure; HttpOnly;'\n    // const pfData = 'PF=ZkKwiVvVsVjMKBkBvrEM89; Path=/; Secure; HttpOnly;'\n    // const cookieData = headersConfig + postmanToken + pfData\n    // console.log('MY COOKIE DATA - '+cookieData);\n    const cookieData = 'avs_cookie=' + headersConfig.avs_cookie + ';up=' + headersConfig.up + ';telus_user_profile=' + headersConfig.telus_user_profile \n     +';sessionId=' + headersConfig.sessionId\n     + ';telus_refresh_cookie=' +  headersConfig.telus_refresh_cookie + ';telus_access_cookie=' + headersConfig.telus_access_cookie\n    //const cookieData = 'avs_cookie=eyJhbGciOiJIUzI1NiJ9.eyJwYXlsb2FkIjoiU3drVmNNeFFSWlUrV3lPSlozRzBVd01WSEM3MzlWdXZ5eXdJRUtzL00rNDZPUGRKYmQ0QUZpWnVLWVBaZUpqUk5oT3lyQm5BNGcwMlVCMkE4UExKdjBITVBjNTd5Z0JXVXZ2NklTY1o2eHNNdWppOUg4UWhMbWYvWGs5aGdXcVJvNWZGSXl0SzJEQU1LcERJbUM3SVNpUXhiT0tpUDhOOHZPUEFWYytJZ08zMW5JK2FEYm94cjBUZlFmbTFMcEUvayt4NUZETDN5ajNUSHMwbCtwRUM3cVpZZE9lSjZGUkk1OFprREY5KzE1VHR3b0JpTUUxemdwVTRtcks4bGpYU2szZGN3cDFkZFc5em9zL1pGdTBQclU4eHh5ZFVPSVE3NHBRVldaQ1RiQkNhVzNMUFNSdHFoQldkSjFuRVhsaVYzVjFPYWswbjY0eUgzZW9aS29wcFlVQUJFY2s0RmN6YVYxRlFod1hFNWRaTFE4NFBlUVYzOWRkZ1AxdW0xWHNydXdUbVdmejFieGNsYkxDTzJrTkZ0VFBNcWorZllvbGRadkkvMy9vMEpsZmhGNWZhbHgrSWNROXB4MkRhOG80ZlR5MGt4Zz09Iiwibm9uY2UiOiIvalVZOERzMVdjblczUEp5IiwiaXNzIjoiQVZTIiwiZXhwIjoxNjg1OTgxOTgzfQ.CKDxfcin7TUD1r_qgFBEgJAyzZiV2B8ZP9-uHjk04WY;up=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjg5MCwidXNlcm5hbWUiOiJvcHVzLnNxZDA0LnRzMDE2IiwidXNlclBDTGV2ZWxFcGciOjYwLCJ1c2VyUGNFeHRlbmRlZFJhdGluZ3MiOiIiLCJ1c2VyUGFyZW50YWxDb250cm9sIjoiTiIsInByb3BlcnR5IjpbeyJwcm9wZXJ0eU5hbWUiOiJPUFRJSyJ9XSwiaXNPdXRPZkhvbWUiOiJOIiwiaWF0IjoxNjg1OTY3NTgzLCJleHAiOjE2OTM3NDM1ODN9.o9uZag-AgFb03bZSpqfwKU7jY6skV5FQzvoSGguNdys;telus_user_profile=df7d3ef66f5f96453ee4a52a486dcf8a4d000f44fc1bf30102c8fad173507b33e9f1e9bbe3f1e7d8da0a5feceab4fda122bacb9642ffdd05c921be1a14ec9b256ff7d74b30ae9214865fceb1418e0845930b337fe9a98e6c0091510fe479ac0f172dd86152566f6d6d117958561bedeb22810ebd674900c826a2f70e26ad3db0;sessionId=7dc74fa2-2537-f10c-ebfd-811763e91654;telus_refresh_cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWx1c19yZWZyZXNoX2Nvb2tpZSI6ImJhYWIwNjhlNWI5NjNhMGU4MWE5NDdkNTIyZjJjMDllZTQxM2Q1NjZjOTFlM2QyYWFlMWY0MTFlOTU3NjViYmY5MjNmNDgzOThjNzBhZjc2NTk5MTVkYzk2MWYyNDRkMiIsImV4cCI6MTcxNzUwMzU4MywiaXNzIjoiQVZTIn0.iaXVfUbURwa7GFoeAGfh2V5QlGylgDK-shoO4hY64Ts;telus_access_cookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWx1c19hY2Nlc3NfY29va2llIjoiYzliNzI2NjhlZWY0YWYwZGY1MGM2MWZmMzI0NzQ4NzI2ZDhlNTBhOWRhOWRlM2ZlZjBiNWJmMDlhZThmMzY0MSIsImV4cCI6MTY4NTk4MTk4MiwiaXNzIjoiQVZTIn0.NuPN-oHrvdqZHpagWbm3-LTapoVuXCWLKukAt04WRiQ';\n    console.log(\"cookieData : - \", cookieData);\n    console.log('ENV URL ', environementUrl)\n    const config2 = {\n        'method': 'GET',\n        'url': environementUrl,\n        'maxBodyLength': Infinity,\n        'Cache-Control': 'no-cache',\n        'headers': {\n            'restful':'yes',\n            'Content-Type': 'application/json',\n            'User-Agent': 'PostmanRuntime/7.32.2',\n            'Accept': '*/*',\n            'Host': 'telus.preprod.n.svc.tv.telus.net',\n           // 'Postman-Token': 'c73b4226-17b3-414e-a0e0-f2067df7752d',\n            'Cookie':cookieData,\n            'Cache-Control': 'no-cache',\n            // 'avs_cookie': headersConfig.avs_cookie,\n            // 'sessionId': headersConfig.sessionId,\n            // 'telus_access_cookie': headersConfig.telus_access_cookie,\n            // 'telus_refresh_cookie': headersConfig.telus_refresh_cookie,\n            // 'telus_user_profile': headersConfig.telus_user_profile\n        },\n        'httpsAgent': httpsAgentPreProd\n    }\n    response = await axios(config2).then((response) => {\n        statusCode = response.status;\n        console.log('Response Body for 2 :===>>> ', response.data);\n        console.log('RESPONSE 2 HEADERS - '+response.headers);\n        return response;\n        })\n} catch (err) {\n    console.log(err);\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\TelusAutomation\\TelusCypressAutomation\\tests\\test_multiple_users.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\TelusAutomation\\TelusCypressAutomation\\tests\\test_multiple_users.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "90060b95-6900-4058-88e4-c88bce1a5747",
              "parentUUID": "41549c73-7401-4b82-abd7-dde7f408bb87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "90060b95-6900-4058-88e4-c88bce1a5747"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2083,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}